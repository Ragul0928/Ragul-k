# ----------------------------------------------
# üè† House Price Forecasting using Regression
# ----------------------------------------------

from google.colab import files
uploaded = files.upload()

import pandas as pd
import io

# Replace 'your_file.csv' with actual uploaded filename
df = pd.read_csv(io.BytesIO(uploaded[list(uploaded.keys())[0]]))
df.head()

print(df.info())
print(df.describe())
print(df.isnull().sum())

# Drop columns with too many missing values or irrelevant columns
df = df.dropna(thresh=len(df)*0.7, axis=1)
df = df.drop(columns=['Id'], errors='ignore')  # Drop 'Id' if exists

# Fill missing numerical values with median
num_cols = df.select_dtypes(include=['float64', 'int64']).columns
df[num_cols] = df[num_cols].fillna(df[num_cols].median())

# Fill categorical with mode
cat_cols = df.select_dtypes(include=['object']).columns
df[cat_cols] = df[cat_cols].fillna(df[cat_cols].mode().iloc[0])

# One-hot encoding
df = pd.get_dummies(df, drop_first=True)

#  Step 4: Feature Selection
if 'SalePrice' in df.columns:
  X = df.drop('SalePrice', axis=1)
  y = df['SalePrice']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score

models = {
    'LinearRegression': LinearRegression(),
    'Ridge': Ridge(),
    'Lasso': Lasso(),
    'RandomForest': RandomForestRegressor(n_estimators=100, random_state=42),
    'XGBoost': XGBRegressor(n_estimators=100, random_state=42, verbosity=0)
}

for name, model in models.items():
    model.fit(X_train, y_train)
    preds = model.predict(X_test)
    rmse = mean_squared_error(y_test, preds, squared=False)
    r2 = r2_score(y_test, preds)
    print(f'{name} - RMSE: {rmse:.2f}, R2 Score: {r2:.3f}')

import joblib
best_model = models['XGBoost']  # Replace with the model of your choice
joblib.dump(best_model, 'best_house_price_model.pkl')
